// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  name         String    // Display name, editable by user
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[]
  votes        CommentVote[]
  role         Role      @default(USER)
  gameVotes    GameVote[]
  profileImage String?   // URL to profile image, nullable
  about        String?   // User bio/about section, nullable

  gameLists    UserGameList[] // Relation to UserGameList
}

model GameCache {
  slug        String    @id
  gameData    Json
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  rawgId      Int?      @unique
  igdbId      Int?
  createdAt   DateTime  @default(now())
  upvotes     Int       @default(0)
  downvotes   Int       @default(0)
  votes       GameVote[]
  views       Int       @default(0)

  userGameLists UserGameList[] // Relation to UserGameList
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String?   // Make nullable for anonymization
  author    User?     @relation(fields: [authorId], references: [id])

  gameSlug  String
  game      GameCache @relation(fields: [gameSlug], references: [slug])

  parentId  String?   // For replies
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  votes     CommentVote[]
  deleted   Boolean  @default(false)
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  type      String   // 'upvote' or 'downvote'
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

model GameVote {
  id        String   @id @default(cuid())
  userId    String
  gameSlug  String
  type      String   // 'upvote' or 'downvote'
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  game      GameCache @relation(fields: [gameSlug], references: [slug])

  @@unique([userId, gameSlug])
}

model UserGameList {
  id        String   @id @default(cuid())
  userId    String
  gameSlug  String
  status    String   // 'played' or 'want_to_play'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  game      GameCache @relation(fields: [gameSlug], references: [slug])

  @@unique([userId, gameSlug, status])
} 